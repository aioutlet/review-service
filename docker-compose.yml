version: '3.8'

services:
  # =============================================================================
  # REVIEW SERVICE
  # =============================================================================
  review-service:
    build:
      context: .
      target: development
    container_name: review-service
    ports:
      - '3007:3007'
      - '9229:9229' # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3007
      - HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017/aioutlet_reviews
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - API_KEY=dev-api-key
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001
      - LOG_LEVEL=debug
      - ENABLE_ANALYTICS=true
      - ENABLE_SENTIMENT_ANALYSIS=false
      - ENABLE_CONTENT_MODERATION=false
      - ENABLE_PURCHASE_VERIFICATION=false
      - DEV_MOCK_EXTERNAL_SERVICES=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - aioutlet-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3007/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # MONGODB DATABASE
  # =============================================================================
  mongodb:
    image: mongo:6.0
    container_name: review-mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=aioutlet_reviews
    volumes:
      - mongodb_data:/data/db
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - aioutlet-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: review-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass redis123
    environment:
      - REDIS_PASSWORD=redis123
    volumes:
      - redis_data:/data
    networks:
      - aioutlet-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # RABBITMQ MESSAGE BROKER
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: review-rabbitmq
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aioutlet-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING - PROMETHEUS (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: review-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aioutlet-network
    restart: unless-stopped
    profiles:
      - monitoring

  # =============================================================================
  # MONITORING - GRAFANA (Optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: review-grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - aioutlet-network
    restart: unless-stopped
    profiles:
      - monitoring

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  aioutlet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
